let mapleader='\'		" 设置mapleader(默认'\')
set nu					" 显示行号 
" set nowrap				" 禁止自动换行
set fillchars=vert:\│	" vim分割线字符(空格)
colorscheme darkblue	" 配色方案
set scrolloff=5			" 光标距离上下边界行数(999:始终位于中间位置)
set t_Co=256			" 开启256色支持
syntax on				" 语法高亮
" set mouse=a				" 全模式鼠标支持开启
set nocompatible		" 去掉有关vi的一致性模式，避免以前版本的一些bug和局限

set tabstop=4			" 设置Tab制表符宽度为4字符
set softtabstop=4		" 设置Tab键宽度(不是tabstop的整数倍时，用空格补充)
set shiftwidth=4		" 换行、使用<或者>时自动缩进宽度为4字符
" set expandtab			" Tab键替换为同等宽度空格字符
autocmd FileType c,cpp,php set tabstop=4 shiftwidth=4 softtabstop=4 expandtab " 编辑C/C++程序时用4个空格代替tab键

set hlsearch			" 搜索字段高亮显示
set incsearch			" 搜索字段时开启实时搜索并定位(set is)

set autoindent			" 自动对齐，换行时自动和上一行对齐
set smartindent			" 依据上面的对齐格式，智能的选择对齐方式
set cindent				" 依据上面的对齐格式，智能的选择对齐方式
set cinoptions+=g0		" c++缩进，类中的pulibc,private,protect等顶头

set laststatus=2		" 显示状态行
set statusline=%t%m%r%h%w%=%p%%\ [%l,%c]%y[%{&ff}]%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\"+\":\"\").\"]\"}

set foldmethod=indent	" 代码折叠：按缩进折叠
set foldlevel=99		" 文件第一次打开时为非折叠状态

set encoding=utf-8		" vim内部使用编码类型
" set fileencoding=utf-8	" 当前文件的字符编码方式
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1 " 启动时逐一匹配，并将fileencoding设置为匹配项
set termencoding=utf-8	" 客户端输出编码


" 折叠快捷键za映射为空格键
nnoremap <space> za

" 分割窗口之间的切换Ctrl+w映射为Ctrl+(h/j/k/l)
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" 分割窗口大小调整
nnoremap <C-W>= :resize +5 <cr>
nnoremap <C-W>- :resize -5 <cr>
nnoremap <C-W>, :vertical resize -10 <cr>
nnoremap <C-W>. :vertical resize +10 <cr>

" 窗口调换到右边
nnoremap <C-W><C-L> <C-W>r
nnoremap <C-W><C-H> <C-W>R

" 统计光标所在字符串出现次数
nnoremap <Leader>wc :% s/<c-r><c-w>/&/gn <cr>

" a.vim插件-头文件源文件切换显示
nnoremap <Leader>aa :A <cr>
" a.vim插件-垂直分割窗口显示同名头文件或源文件
nnoremap <Leader>av :AV <cr>
" a.vim插件-水平分割窗口显示同名头文件或源文件
nnoremap <Leader>as :AS <cr>

" vimgrep快捷键-搜索光标所在单词
nnoremap <Leader>vg :vimgrep /<c-r><c-w>/gj **/*.c **/*.cpp **/*.h <cr> :cw <cr>

" 去除重复行
nnoremap <Leader>dc :g/^\(.*\)$\n\1$/d <cr>

" 打开文件自动定位到上次编辑位置
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif



" ++++++++++++++++++++++++++++插件配置++++++++++++++++++++++++++++++++++++
" 1.Github vim-script 用户插件：Plugin 'plugin'
" 	插件查询：http://vim-scripts.org/vim/scripts.html
" 2.Github 其他 用户插件：Plugin 'username/plugin'
" 3.非 Github 用户插件：Plugin ''git://git.wincent.com/command-t.git''
" 4.本地插件：Plugin 'file:///home/gmarik/path/to/plugin'
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#begin()  

Plugin 'gmarik/vundle' 
Plugin 'kien/ctrlp.vim' " 文件搜索
Plugin 'jiangmiao/auto-pairs' " 符号配对
Plugin 'othree/xml.vim' " XML文档编辑
Plugin 'mattn/emmet-vim.git' " HTML文档编辑
Plugin 'Shougo/neocomplcache.vim' " HTML编辑提示
Plugin 'guns/xterm-color-table.vim' " 终端颜色表
Plugin 'easymotion/vim-easymotion' " 快速跳转
Plugin 'godlygeek/tabular' " 文本对齐
Plugin 'plasticboy/vim-markdown' " markdown语法高亮

" 标签显示(首先安装ctags)
Bundle 'majutsushi/tagbar'
let g:tagbar_ctags_bin ='/usr/bin/ctags'
let g:tagbar_left = 1
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_sort = 0
nnoremap <silent> <leader>tl :TagbarToggle<cr>

Plugin 'tpope/vim-commentary' " 代码注释
autocmd FileType python,shell,coffee set commentstring=#\ %s
autocmd FileType java,c,cpp set commentstring=//\ %s


Plugin 'scrooloose/nerdtree' " 文件目录
nnoremap <Leader>nt :NERDTree <cr>
" 无文件时自动退出
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeWinPos=1    " 右侧显示窗口
let NERDTreeQuitOnlpen=0 " 打开文件后是否关闭


Plugin 'rking/ag.vim' " 单词搜索(首先安装the_silver_searcher, ubuntu安装silversearcher_ag)
let g:ag_highlight=1
" 当前文件搜索
nnoremap <Leader>f :Ag! -Q "<c-r><c-w>" <c-r>=expand("%:p")<cr>
" 当前目录搜索
nnoremap <Leader>F :Ag! -Q "<c-r><c-w>"

Plugin 'vimwiki/vimwiki' " wiki笔记
let g:vimwiki_dir_link='index'
let nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'c', 'asm': 's'}
let g:vimwiki_list = [
			\{'path': '~/.vimwiki', 'path_html': '~/.archdoor.github.io', 'css_name': 'css/vimwiki.css', 'auto_toc': 1, 'maxhi': 1},
			\{'path': '~/.wiki_work/wiki', 'path_html': '~/.wiki_work', 'css_name': 'css/vimwiki.css', 'auto_toc': 1, 'maxhi': 1},
			\]
let g:vimwiki_hl_headers = 1
let g:vimwiki_toc_header = '目录索引'
let g:vimwiki_menu = ''
let g:vimwiki_hl_cb_checked = 1 " 标记为完成的 checklist 项目会有特别的颜色
let g:tagbar_type_vimwiki = {
          \   'ctagstype':'vimwiki'
          \ , 'kinds':['h:header']
          \ , 'sro':'&&&'
          \ , 'kind2scope':{'h':'header'}
          \ , 'sort':0
          \ , 'ctagsbin':'~/vimwiki/vwtags.py'
          \ , 'ctagsargs': 'default'
          \ } " 利用tagbar生成wiki文件侧边栏目录

Plugin 'mattn/calendar-vim' " 日历插件
nnoremap <Leader>cl :Calendar<cr>


Plugin 'Valloric/YouCompleteMe' " 自动补全
set completeopt=longest,menu
let g:ycm_confirm_extra_conf=0
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_echo_current_diagnostic = 0
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_min_num_of_chars_for_completion=2
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_complete_in_comments = 1  
let g:ycm_complete_in_strings = 1  
let g:ycm_collect_identifiers_from_comments_and_strings = 0  
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_cache_omnifunc=0
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_server_python_interpreter = '/usr/bin/python2'
nnoremap go :YcmCompleter GoToDefinitionElseDeclaration<cr>


call vundle#end()
filetype on 
filetype plugin on
filetype plugin indent on
	

